{"version":3,"sources":["imgs/forest-background-5-flou.jpeg","imgs/Play_to_Plan_1.gif","getWeb3.js","components/Owner.js","components/Player.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Owner","parentToChild","account","contract","inputWithdrow","useRef","inputSetCost","inputGetPlayer","useState","balanceEth","setBalanceEth","supplyLeaf","setSupplyLeaf","supplyNft","setSupplyNft","pause","setPause","test","setTest","React","lastUpdateDate","level","nbDaySuccess","oldNbStep","totalNbStep","uriIpfs","player","setPlayer","useEffect","ethBalance","leafSupply","nftSupply","getPaused","getIsTest","methods","balanceDappEth","call","from","utils","fromWei","balanceDappLeaf","supply","balanceNft","getPause","paused","getTest","isTest","pauseChanged","change","send","testChanged","costChanged","e","preventDefault","value","current","setCost","withdraw","getPlayer","getPlayerWithAddress","playerReceived","width","FormCheck","type","checked","onChange","label","onSubmit","className","ref","length","style","styles","textFormat","Date","toLocaleString","map","x","color","fontWeight","margin","PagePublic","isPlayer","setIsPlayer","balance","setBalance","setNftSupply","description","edition","image","name","nftJson","setNftJson","getPlayerDatas","events","NftBuyed","fromBlock","on","event","returnValues","NftTransfer","LeafTransfer","uploadNftJson","baseUri","substring","fetch","getUri","json","buyLnft","lnftValue","toWei","buyNft","then","result","load","catch","error","getBalanceSupplyDatas","myBalance","toString","simuleSteps","stepToLeafWithoutTimestamp","location","reload","container","height","src","alt","marginTop","Button","buttonStyle","onClick","logo","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","backgroundColor","padding","bottom","App","state","setState","isOwner","setIsOwner","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","LeafContract","networks","instance","Contract","abi","address","owner","isOwn","alert","Player","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"u97sBAAAA,EAAOC,QAAU,IAA0B,uD,mBCA3CD,EAAOC,QAAU,IAA0B,4C,wNCqC5BC,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8D,gBC4LrBQ,EA9LD,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACPC,EAA4BD,EAA5BC,QAASV,EAAmBS,EAAnBT,KAAMW,EAAaF,EAAbE,SAEjBC,EAAgBC,mBAChBC,EAAeD,mBACfE,EAAiBF,mBALY,EAOCG,mBAAS,GAPV,mBAO5BC,EAP4B,KAOhBC,EAPgB,OAQCF,mBAAS,GARV,mBAQ5BG,EAR4B,KAQhBC,EARgB,OASDJ,mBAAS,GATR,mBAS5BK,EAT4B,KASjBC,EATiB,OAUTN,oBAAS,GAVA,mBAU5BO,EAV4B,KAUrBC,EAVqB,OAWXR,oBAAS,GAXE,mBAW5BS,EAX4B,KAWtBC,EAXsB,OAaPC,IAAMX,SAAS,CACzCY,eAAgB,EAChBC,MAAO,EACPC,aAAc,EACdC,UAAW,EACXC,YAAa,EACbC,QAAS,KAnBwB,mBAa5BC,EAb4B,KAapBC,EAboB,KAsBnCC,qBAAU,WACR,sBAAC,sBAAAtC,EAAA,sDACKa,IACF0B,IAEAC,IAEAC,IAEAC,IAEAC,KAVH,0CAAD,KAaC,CAAC9B,IAEJyB,qBAAU,WACR,sBAAC,sBAAAtC,EAAA,sDACKa,GACFwB,EAAUD,GAFb,0CAAD,KAKC,CAACA,IAEJ,IAAMG,EAAU,uCAAG,4BAAAvC,EAAA,sEACQa,EAAS+B,QAC/BC,iBACAC,KAAK,CAAEC,KAAMnC,IAHC,OACX2B,EADW,OAIjBnB,EAAclB,EAAK8C,MAAMC,QAAQV,EAAY,UAJ5B,2CAAH,qDAOVC,EAAU,uCAAG,4BAAAxC,EAAA,sEACIa,EAAS+B,QAC3BM,kBACAJ,KAAK,CAAEC,KAAMnC,IAHC,OACXuC,EADW,OAKjB7B,EAAcpB,EAAK8C,MAAMC,QAAQE,EAAQ,UALxB,2CAAH,qDAQVV,EAAS,uCAAG,4BAAAzC,EAAA,sEACKa,EAAS+B,QAAQQ,aAAaN,KAAK,CAAEC,KAAMnC,IADhD,OACVuC,EADU,OAGhB3B,EAAa2B,GAHG,2CAAH,qDAMTT,EAAS,uCAAG,4BAAA1C,EAAA,sEACKa,EAAS+B,QAAQS,WAAWP,KAAK,CAAEC,KAAMnC,IAD9C,OACV0C,EADU,OAGhB5B,EAAS4B,GAHO,2CAAH,qDAMTX,EAAS,uCAAG,4BAAA3C,EAAA,sEACKa,EAAS+B,QAAQW,UAAUT,KAAK,CAAEC,KAAMnC,IAD7C,OACV4C,EADU,OAGhB5B,EAAQ4B,GAHQ,2CAAH,qDAMTC,EAAY,uCAAG,4BAAAzD,EAAA,6DACb0D,GAAUjC,EADG,SAEbZ,EAAS+B,QAAQlB,SAASgC,GAAQC,KAAK,CAAEZ,KAAMnC,IAFlC,OAGnBc,EAASgC,GAHU,2CAAH,qDAMZE,EAAW,uCAAG,4BAAA5D,EAAA,6DACZ0D,GAAU/B,EADE,SAEZd,EAAS+B,QAAQhB,QAAQ8B,GAAQC,KAAK,CAAEZ,KAAMnC,IAFlC,OAGlBgB,EAAQ8B,GAHU,2CAAH,qDAMXG,EAAW,uCAAG,WAAOC,GAAP,eAAA9D,EAAA,6DAClB8D,EAAEC,iBACEC,EAAQhD,EAAaiD,QAAQD,MAFf,SAGZnD,EAAS+B,QAAQsB,QAAQF,GAAOL,KAAK,CAAEZ,KAAMnC,IAHjC,2CAAH,sDAMXuD,EAAQ,uCAAG,WAAOL,GAAP,eAAA9D,EAAA,6DACf8D,EAAEC,iBACEC,EAAQlD,EAAcmD,QAAQD,MAFnB,SAGTnD,EAAS+B,QAAQuB,SAASH,GAAOL,KAAK,CAAEZ,KAAMnC,IAHrC,2CAAH,sDAMRwD,EAAS,uCAAG,WAAON,GAAP,iBAAA9D,EAAA,6DAChB8D,EAAEC,iBACEC,EAAQ/C,EAAegD,QAAQD,MAFnB,SAIanD,EAAS+B,QACnCyB,qBAAqBL,GACrBlB,KAAK,CAAEC,KAAMnC,IANA,OAIV0D,EAJU,OAOhBjC,EAAUiC,GAPM,2CAAH,sDAUf,OACE,6BACE,uCAAa1D,GAEb,6BACE,wBAAI2D,MAAM,QACV,iDACA,8CAAoBpD,EAApB,QACA,iDAAuBE,EAAvB,iBACA,iDAAuB,IAAQE,EAA/B,WAGF,6BACE,wBAAIgD,MAAM,QACV,kDACA,kBAACC,EAAA,EAAD,CACEC,KAAK,SACLC,QAASjD,EACTkD,SAAUlB,EACVmB,MAAM,4BAER,kBAACJ,EAAA,EAAD,CACEC,KAAK,SACLC,QAAS/C,EACTgD,SAAUf,EACVgB,MAAM,wBAGR,0BAAMC,SAAUV,EAAUW,UAAU,QAClC,+BACE,2BAAOL,KAAK,OAAOM,IAAKjE,EAAegE,UAAU,WAEnD,2BAAOL,KAAK,SAAST,MAAM,WAAWc,UAAU,YAGlD,0BAAMD,SAAUhB,EAAaiB,UAAU,QACrC,+BACE,2BAAOL,KAAK,OAAOM,IAAK/D,EAAc8D,UAAU,WAElD,2BACEL,KAAK,SACLT,MAAM,0BACNc,UAAU,YAId,0BAAMD,SAAUT,EAAWU,UAAU,QACnC,+BACE,2BAAOL,KAAK,OAAOM,IAAK9D,EAAgB6D,UAAU,WAEpD,2BAAOL,KAAK,SAAST,MAAM,aAAac,UAAU,YAG1B,GAAzB1C,EAAOD,QAAQ6C,QACd,6BACE,wBAAIC,MAAOC,EAAOC,YAAlB,SAAqC/C,EAAOH,WAC5C,wBAAIgD,MAAOC,EAAOC,YAAlB,eAA2C/C,EAAOF,aAClD,wBAAI+C,MAAOC,EAAOC,YAAlB,mBACgB/C,EAAOJ,cAEvB,wBAAIiD,MAAOC,EAAOC,YAAlB,+BACyB,IACG,GAAzB/C,EAAON,eACJ,IAAIsD,KAA6B,IAAxBhD,EAAON,gBAAuBuD,iBACvC,KAEN,wBAAIJ,MAAOC,EAAOC,YAAlB,aAAyC/C,EAAOL,OAC/CK,EAAOD,QAAQmD,KAAI,SAACC,GAAD,OAClB,wBAAIN,MAAOC,EAAOC,YAAlB,YAAwCI,UAWhDL,EAAS,CACbC,WAAY,CACVK,MAAO,UACPC,WAAY,OACZC,OAAQ,M,0CCPGC,EA1LI,SAAC,GAAuB,IAArBhF,EAAoB,EAApBA,cACZC,EAA4BD,EAA5BC,QAASV,EAAmBS,EAAnBT,KAAMW,EAAaF,EAAbE,SADiB,EAGRgB,IAAMX,UAAS,GAHP,mBAGjC0E,EAHiC,KAGvBC,EAHuB,OAIV3E,mBAAS,KAJC,mBAIjC4E,EAJiC,KAIxBC,EAJwB,OAKN7E,mBAAS,GALH,mBAKjCuB,EALiC,KAKtBuD,EALsB,OAMJnE,IAAMX,UAAS,GANX,gCAQZW,IAAMX,SAAS,CACzCY,eAAgB,EAChBC,MAAO,EACPC,aAAc,EACdC,UAAW,EACXC,YAAa,EACbC,QAAS,MAd6B,mBAQjCC,EARiC,KAQzBC,EARyB,OAgBVnB,mBAAS,CACrC+E,YAAa,GACbC,QAAS,EACTC,MAAO,GACPC,KAAM,KApBgC,mBAgBjCC,EAhBiC,KAgBxBC,EAhBwB,KAuBxChE,qBAAU,WACR,sBAAC,sBAAAtC,EAAA,sDACKa,GACF0F,IAFH,0CAAD,KAKC,CAAC1F,IAEJyB,qBAAU,WACR,sBAAC,sBAAAtC,EAAA,0DACKa,EADL,gCAESA,EAAS2F,OAAOC,SAAS,CAAEC,UAAW,IAAKC,GAAG,QAAQ,SAACC,GAChDA,EAAMC,aAAazE,QAClBxB,GACV2F,OALP,uBASS1F,EAAS2F,OACZM,YAAY,CAAEJ,UAAW,IACzBC,GAAG,QAAQ,SAACC,GACAA,EAAMC,aAAazE,QAClBxB,GACV2F,OAdT,uBAkBS1F,EAAS2F,OACZO,aAAa,CAAEL,UAAW,IAC1BC,GAAG,QAAQ,SAACC,GACAA,EAAMC,aAAazE,QAClBxB,GACV2F,OAvBT,0CAAD,KA4BC,CAAC1F,IAEJ,IAAMmG,EAAa,uCAAG,WAAO1C,GAAP,mBAAAtE,EAAA,6DACdiH,EACJ3C,EAAenC,QAAQmC,EAAenC,QAAQ6C,OAAS,GAAGkC,UAAU,GAFlD,SAGCC,MAAM,wBAAD,OAAyBF,IAH/B,cAGdG,EAHc,gBAIDA,EAAOC,OAJN,OAIdA,EAJc,OAKpBf,EAAW,CACTL,YAAaoB,EAAKpB,YAClBC,QAASmB,EAAKnB,QACdC,MAAM,wBAAD,OAA0BkB,EAAKlB,MAAMe,UAAU,IACpDd,KAAMiB,EAAKjB,OATO,2CAAH,sDAabkB,EAAO,uCAAG,4BAAAtH,EAAA,6DACRuH,EAAYrH,EAAK8C,MAAMwE,MAAM,OAAQ,SAD7B,SAER3G,EAAS+B,QACZ6E,SACA9D,KAAK,CAAEZ,KAAMnC,EAASoD,MAAOuD,IAC7BG,MAAK,SAACC,GACL9B,GAAY,GACZ+B,OAEDC,OAAM,SAACC,GACNzH,QAAQyH,MAAM,gDAAkDA,MAVtD,OAadvB,IAbc,2CAAH,qDAgBPA,EAAc,uCAAG,sBAAAvG,EAAA,sEACfa,EAAS+B,QACZwB,YACAtB,KAAK,CAAEC,KAAMnC,IACb8G,MAAK,SAACC,GACL9B,GAAY,GACZxD,EAAUsF,GACVI,IACAf,EAAcW,MAIfE,OAAM,SAACC,GACNjC,GAAY,MAbK,2CAAH,qDAiBdkC,EAAqB,uCAAG,8BAAA/H,EAAA,sEACJa,EAAS+B,QAAQkD,UAAUhD,KAAK,CAAEC,KAAMnC,IADpC,cACtBoH,EADsB,gBAEPnH,EAAS+B,QAAQQ,aAAaN,KAAK,CAAEC,KAAMnC,IAFpC,OAEtBuC,EAFsB,OAI5B6C,EAAa,IAAQ7C,GACrB4C,EAAW7F,EAAK8C,MAAMC,QAAQ+E,EAAW,SAASC,YALtB,2CAAH,qDAQrBC,EAAW,uCAAG,sBAAAlI,EAAA,sEACZa,EAAS+B,QACZuF,2BAA2B,KAC3BxE,KAAK,CAAEZ,KAAMnC,IACb8G,MAAK,SAACC,GACLpB,OAEDsB,OAAM,SAACC,GACNzH,QAAQyH,MAAM,0BAA4BA,MAR5B,2CAAH,qDAYXF,EAAI,uCAAG,sBAAA5H,EAAA,sDACXF,OAAOsI,SAASC,QAAO,GADZ,2CAAH,qDAIV,OACE,yBAAKpD,MAAOC,EAAOoD,WAChB1C,EACC,6BACE,wBAAIX,MAAO,CAAEO,MAAO,YAApB,YAA2C5E,GAE3C,wBAAIqE,MAAO,CAAEO,MAAO,UAAWC,WAAY,SAA3C,qBACqBhD,EADrB,UAIA,yBAAK8B,MAAM,MAAMgE,OAAO,MAAMC,IAAKnC,EAAQF,MAAOsC,IAAI,QACtD,wBAAIxD,MAAO,CAAEyD,UAAW,KAAOnE,MAAM,MAClC8B,EAAQD,MAGX,wBAAInB,MAAOC,EAAOC,YAAlB,SAAqC/C,EAAOH,WAC5C,wBAAIgD,MAAOC,EAAOC,YAAlB,eAA2C/C,EAAOF,aAClD,wBAAI+C,MAAOC,EAAOC,YAAlB,mBAA4C/C,EAAOJ,cACnD,wBAAIiD,MAAOC,EAAOC,YAAlB,+BACyB,IACG,GAAzB/C,EAAON,eACJ,IAAIsD,KAA6B,IAAxBhD,EAAON,gBAAuBuD,iBACvC,KAEN,wBAAIJ,MAAOC,EAAOC,YAAlB,aAAyC/C,EAAOL,OAChD,wBAAIkD,MAAOC,EAAOC,YAAlB,aAAyCW,EAAzC,SAEA,kBAAC6C,EAAA,EAAD,CAAQ1D,MAAOC,EAAO0D,YAAaC,QAASX,GAA5C,sBAKF,6BACE,wBAAIjD,MAAOC,EAAOC,YAAlB,gBACA,wBAAIF,MAAOC,EAAOC,YAAlB,gDAGA,yBAAKZ,MAAM,MAAMgE,OAAO,MAAMC,IAAKM,IAAML,IAAI,QAE7C,wBAAIxD,MAAOC,EAAOC,YAAlB,UAAsCvE,GACtC,wBAAIqE,MAAOC,EAAOC,YAAlB,wEAGA,wBAAIF,MAAOC,EAAOC,YAAlB,4BAEA,kBAACwD,EAAA,EAAD,CAAQ1D,MAAOC,EAAO0D,YAAaC,QAASvB,GAA5C,cAWJpC,EAAS,CACboD,UAAW,CACTS,gBAAgB,OAAD,OAASA,IAAT,KACfC,mBAAoB,SACpBC,eAAgB,QAChBC,iBAAkB,YAClB3E,MAAO,QACPgE,OAAQ,SAGVpD,WAAY,CACVK,MAAO,UACPC,WAAY,OACZC,OAAQ,KAGVkD,YAAa,CACXrE,MAAO,KACP4E,gBAAiB,UACjB3D,MAAO,QACP4D,QAAS,WACTC,OAAQ,IACR3D,OAAQ,KClJG4D,MA7Df,WAAgB,IAAD,EACapI,mBAAS,CACjCN,QAAS,KACTV,KAAM,KACNW,SAAU,OAJC,mBACN0I,EADM,KACCC,EADD,OAMiBtI,oBAAS,GAN1B,mBAMNuI,EANM,KAMGC,EANH,KAkDb,OA1CApH,qBAAU,WACR,sBAAC,wCAAAtC,EAAA,+EAGsBN,IAHtB,cAGSQ,EAHT,gBAK0BA,EAAKyJ,IAAIC,cALnC,cAKSC,EALT,gBAQ2B3J,EAAKyJ,IAAIG,IAAIC,QARxC,cAQSC,EART,OASSC,EAAkBC,EAAaC,SAASH,GACxCI,EAAW,IAAIlK,EAAKyJ,IAAIU,SAC5BH,EAAaI,IACbL,GAAmBA,EAAgBM,SAGrCf,EAAS,CAAE5I,QAASiJ,EAAS,GAAI3J,KAAMA,EAAMW,SAAUuJ,IAf1D,UAiBuBA,EAASxH,QAC1B4H,QACA1H,KAAK,CAAEC,KAAM8G,EAAS,KAnB5B,QAiBSW,EAjBT,OAoBSC,EAAQD,GAASX,EAAS,GAChCH,EAAWe,GArBd,kDAwBGC,MAAM,0EAINrK,QAAQyH,MAAR,MA5BH,yDAAD,KA+BC,IAEHxF,qBAAU,WACR,sBAAC,sBAAAtC,EAAA,sDACCF,OAAOG,SAAS0G,GAAG,kBAAnB,sBAAsC,sBAAA3G,EAAA,sDACpCF,OAAOsI,SAASC,QAAO,GADa,4CADvC,0CAAD,KAKC,IAGD,yBAAKvD,UAAU,OACZ2E,EACC,kBAAC,EAAD,CAAO9I,cAAe4I,IAEtB,kBAACoB,EAAD,CAAQhK,cAAe4I,MCpDXqB,QACW,cAA7B9K,OAAOsI,SAASyC,UAEe,UAA7B/K,OAAOsI,SAASyC,UAEhB/K,OAAOsI,SAASyC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,MAAK,SAAA4D,GACjCA,EAAaC,kB","file":"static/js/main.3db8e649.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/forest-background-5-flou.2d3105fe.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Play_to_Plan_1.6d95aa53.gif\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { FormCheck } from \"react-bootstrap\";\r\n\r\nconst Owner = ({ parentToChild }) => {\r\n  const { account, web3, contract } = parentToChild;\r\n\r\n  const inputWithdrow = useRef();\r\n  const inputSetCost = useRef();\r\n  const inputGetPlayer = useRef();\r\n\r\n  const [balanceEth, setBalanceEth] = useState(0);\r\n  const [supplyLeaf, setSupplyLeaf] = useState(0);\r\n  const [supplyNft, setSupplyNft] = useState(0);\r\n  const [pause, setPause] = useState(false);\r\n  const [test, setTest] = useState(true);\r\n\r\n  const [player, setPlayer] = React.useState({\r\n    lastUpdateDate: 0,\r\n    level: 0,\r\n    nbDaySuccess: 0,\r\n    oldNbStep: 0,\r\n    totalNbStep: 0,\r\n    uriIpfs: [],\r\n  });\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (contract) {\r\n        ethBalance();\r\n\r\n        leafSupply();\r\n\r\n        nftSupply();\r\n\r\n        getPaused();\r\n\r\n        getIsTest();\r\n      }\r\n    })();\r\n  }, [contract]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (contract) {\r\n        setPlayer(player);\r\n      }\r\n    })();\r\n  }, [player]);\r\n\r\n  const ethBalance = async () => {\r\n    const ethBalance = await contract.methods\r\n      .balanceDappEth()\r\n      .call({ from: account });\r\n    setBalanceEth(web3.utils.fromWei(ethBalance, \"ether\"));\r\n  };\r\n\r\n  const leafSupply = async () => {\r\n    const supply = await contract.methods\r\n      .balanceDappLeaf()\r\n      .call({ from: account });\r\n\r\n    setSupplyLeaf(web3.utils.fromWei(supply, \"ether\"));\r\n  };\r\n\r\n  const nftSupply = async () => {\r\n    const supply = await contract.methods.balanceNft().call({ from: account });\r\n\r\n    setSupplyNft(supply);\r\n  };\r\n\r\n  const getPaused = async () => {\r\n    const paused = await contract.methods.getPause().call({ from: account });\r\n\r\n    setPause(paused);\r\n  };\r\n\r\n  const getIsTest = async () => {\r\n    const isTest = await contract.methods.getTest().call({ from: account });\r\n\r\n    setTest(isTest);\r\n  };\r\n\r\n  const pauseChanged = async () => {\r\n    const change = !pause;\r\n    await contract.methods.setPause(change).send({ from: account });\r\n    setPause(change);\r\n  };\r\n\r\n  const testChanged = async () => {\r\n    const change = !test;\r\n    await contract.methods.setTest(change).send({ from: account });\r\n    setTest(change);\r\n  };\r\n\r\n  const costChanged = async (e) => {\r\n    e.preventDefault();\r\n    let value = inputSetCost.current.value;\r\n    await contract.methods.setCost(value).send({ from: account });\r\n  };\r\n\r\n  const withdraw = async (e) => {\r\n    e.preventDefault();\r\n    let value = inputWithdrow.current.value;\r\n    await contract.methods.withdraw(value).send({ from: account });\r\n  };\r\n\r\n  const getPlayer = async (e) => {\r\n    e.preventDefault();\r\n    let value = inputGetPlayer.current.value;\r\n\r\n    const playerReceived = await contract.methods\r\n      .getPlayerWithAddress(value)\r\n      .call({ from: account });\r\n    setPlayer(playerReceived);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h4>OWNER : {account}</h4>\r\n\r\n      <div>\r\n        <hr width=\"60%\" />\r\n        <h2>Balances & Supply</h2>\r\n        <h5>Balance Dapp : {balanceEth} ETH</h5>\r\n        <h5>LEAF disponible : {supplyLeaf}/150.000.000 </h5>\r\n        <h5>LNFT disponible : {10000 - supplyNft}/10000</h5>\r\n      </div>\r\n\r\n      <div>\r\n        <hr width=\"60%\" />\r\n        <h2>Changement du Dapp</h2>\r\n        <FormCheck\r\n          type=\"switch\"\r\n          checked={pause}\r\n          onChange={pauseChanged}\r\n          label=\"Mettre le Dapp en pause\"\r\n        />\r\n        <FormCheck\r\n          type=\"switch\"\r\n          checked={test}\r\n          onChange={testChanged}\r\n          label=\"Passer en mode test\"\r\n        />\r\n\r\n        <form onSubmit={withdraw} className=\"form\">\r\n          <label>\r\n            <input type=\"text\" ref={inputWithdrow} className=\"input\" />\r\n          </label>\r\n          <input type=\"submit\" value=\"Withdraw\" className=\"button\" />\r\n        </form>\r\n\r\n        <form onSubmit={costChanged} className=\"form\">\r\n          <label>\r\n            <input type=\"text\" ref={inputSetCost} className=\"input\" />\r\n          </label>\r\n          <input\r\n            type=\"submit\"\r\n            value=\"Changer le Prix de LNFT\"\r\n            className=\"button\"\r\n          />\r\n        </form>\r\n\r\n        <form onSubmit={getPlayer} className=\"form\">\r\n          <label>\r\n            <input type=\"text\" ref={inputGetPlayer} className=\"input\" />\r\n          </label>\r\n          <input type=\"submit\" value=\"Get Joueur\" className=\"button\" />\r\n        </form>\r\n\r\n        {player.uriIpfs.length != 0 && (\r\n          <div>\r\n            <h5 style={styles.textFormat}>Pas : {player.oldNbStep}</h5>\r\n            <h5 style={styles.textFormat}>Total pas : {player.totalNbStep}</h5>\r\n            <h5 style={styles.textFormat}>\r\n              Nb. succès : {player.nbDaySuccess}\r\n            </h5>\r\n            <h5 style={styles.textFormat}>\r\n              Dernière date succès :{\" \"}\r\n              {player.lastUpdateDate != 0\r\n                ? new Date(player.lastUpdateDate * 1000).toLocaleString()\r\n                : \"0\"}\r\n            </h5>\r\n            <h5 style={styles.textFormat}> Niveau : {player.level}</h5>\r\n            {player.uriIpfs.map((x) => (\r\n              <h5 style={styles.textFormat}> IPFSs : {x}</h5>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Owner;\r\n\r\nconst styles = {\r\n  textFormat: {\r\n    color: \"#0D3833\",\r\n    fontWeight: \"bold\",\r\n    margin: \"0\",\r\n  },\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport backgroundImage from \"./../imgs/forest-background-5-flou.jpeg\";\r\nimport logo from \"./../imgs/Play_to_Plan_1.gif\";\r\n\r\nconst PagePublic = ({ parentToChild }) => {\r\n  const { account, web3, contract } = parentToChild;\r\n\r\n  const [isPlayer, setIsPlayer] = React.useState(false);\r\n  const [balance, setBalance] = useState(\"0\");\r\n  const [nftSupply, setNftSupply] = useState(0);\r\n  const [refreshing, setRefreshing] = React.useState(false);\r\n\r\n  const [player, setPlayer] = React.useState({\r\n    lastUpdateDate: 0,\r\n    level: 0,\r\n    nbDaySuccess: 0,\r\n    oldNbStep: 0,\r\n    totalNbStep: 0,\r\n    uriIpfs: [],\r\n  });\r\n  const [nftJson, setNftJson] = useState({\r\n    description: \"\",\r\n    edition: 1,\r\n    image: \"\",\r\n    name: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (contract) {\r\n        getPlayerDatas();\r\n      }\r\n    })();\r\n  }, [contract]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (contract) {\r\n        await contract.events.NftBuyed({ fromBlock: 0 }).on(\"data\", (event) => {\r\n          let addr = event.returnValues.player;\r\n          if (addr == account) {\r\n            getPlayerDatas();\r\n          }\r\n        });\r\n\r\n        await contract.events\r\n          .NftTransfer({ fromBlock: 0 })\r\n          .on(\"data\", (event) => {\r\n            let addr = event.returnValues.player;\r\n            if (addr == account) {\r\n              getPlayerDatas();\r\n            }\r\n          });\r\n\r\n        await contract.events\r\n          .LeafTransfer({ fromBlock: 0 })\r\n          .on(\"data\", (event) => {\r\n            let addr = event.returnValues.player;\r\n            if (addr == account) {\r\n              getPlayerDatas();\r\n            }\r\n          });\r\n      }\r\n    })();\r\n  }, [contract]);\r\n\r\n  const uploadNftJson = async (playerReceived) => {\r\n    const baseUri =\r\n      playerReceived.uriIpfs[playerReceived.uriIpfs.length - 1].substring(7);\r\n    const getUri = await fetch(`https://ipfs.io/ipfs/${baseUri}`);\r\n    const json = await getUri.json();\r\n    setNftJson({\r\n      description: json.description,\r\n      edition: json.edition,\r\n      image: `https://ipfs.io/ipfs/${json.image.substring(7)}`,\r\n      name: json.name,\r\n    });\r\n  };\r\n\r\n  const buyLnft = async () => {\r\n    const lnftValue = web3.utils.toWei(\"0.01\", \"ether\");\r\n    await contract.methods\r\n      .buyNft()\r\n      .send({ from: account, value: lnftValue })\r\n      .then((result) => {\r\n        setIsPlayer(true);\r\n        load();\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error in buyNft->connector.sendTransaction : \" + error);\r\n      });\r\n\r\n    getPlayerDatas();\r\n  };\r\n\r\n  const getPlayerDatas = async () => {\r\n    await contract.methods\r\n      .getPlayer()\r\n      .call({ from: account })\r\n      .then((result) => {\r\n        setIsPlayer(true);\r\n        setPlayer(result);\r\n        getBalanceSupplyDatas();\r\n        uploadNftJson(result);\r\n\r\n        // console.log(result);\r\n      })\r\n      .catch((error) => {\r\n        setIsPlayer(false);\r\n      });\r\n  };\r\n\r\n  const getBalanceSupplyDatas = async () => {\r\n    const myBalance = await contract.methods.balance().call({ from: account });\r\n    const supply = await contract.methods.balanceNft().call({ from: account });\r\n\r\n    setNftSupply(10000 - supply);\r\n    setBalance(web3.utils.fromWei(myBalance, \"ether\").toString());\r\n  };\r\n\r\n  const simuleSteps = async () => {\r\n    await contract.methods\r\n      .stepToLeafWithoutTimestamp(10000)\r\n      .send({ from: account })\r\n      .then((result) => {\r\n        getPlayerDatas();\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error in simuleSteps : \" + error);\r\n      });\r\n  };\r\n\r\n  const load = async () => {\r\n    window.location.reload(false);\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      {isPlayer ? (\r\n        <div>\r\n          <h4 style={{ color: \"#00FF00\" }}>Player : {account}</h4>\r\n\r\n          <h1 style={{ color: \"#0D3833\", fontWeight: \"bold\" }}>\r\n            LNFT disponible : {nftSupply}/10000\r\n          </h1>\r\n\r\n          <img width=\"250\" height=\"250\" src={nftJson.image} alt=\"new\" />\r\n          <h5 style={{ marginTop: \"0\" }} width=\"10\">\r\n            {nftJson.name}\r\n          </h5>\r\n\r\n          <h3 style={styles.textFormat}>Pas : {player.oldNbStep}</h3>\r\n          <h3 style={styles.textFormat}>Total pas : {player.totalNbStep}</h3>\r\n          <h3 style={styles.textFormat}>Nb. succès : {player.nbDaySuccess}</h3>\r\n          <h3 style={styles.textFormat}>\r\n            Dernière date succès :{\" \"}\r\n            {player.lastUpdateDate != 0\r\n              ? new Date(player.lastUpdateDate * 1000).toLocaleString()\r\n              : \"0\"}\r\n          </h3>\r\n          <h3 style={styles.textFormat}> Niveau : {player.level}</h3>\r\n          <h3 style={styles.textFormat}>Balance : {balance} LEAF</h3>\r\n\r\n          <Button style={styles.buttonStyle} onClick={simuleSteps}>\r\n            Simuler 10000 pas\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1 style={styles.textFormat}>Play 2 Plant</h1>\r\n          <h1 style={styles.textFormat}>\r\n            Marche, plante des arbres et gagne des LEAFs\r\n          </h1>\r\n          <img width=\"350\" height=\"350\" src={logo} alt=\"new\" />\r\n\r\n          <h2 style={styles.textFormat}>Cher : {account}</h2>\r\n          <h2 style={styles.textFormat}>\r\n            pour entrer dans le jeu il faut acheter un LNFT sur Ropsten TestNet.\r\n          </h2>\r\n          <h2 style={styles.textFormat}>Prix : 1 LNFT = 0.01 ETH</h2>\r\n\r\n          <Button style={styles.buttonStyle} onClick={buyLnft}>\r\n            ACHETER\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PagePublic;\r\n\r\nconst styles = {\r\n  container: {\r\n    backgroundImage: `url(${backgroundImage})`,\r\n    backgroundPosition: \"center\",\r\n    backgroundSize: \"cover\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    width: \"100vw\",\r\n    height: \"100vh\",\r\n  },\r\n\r\n  textFormat: {\r\n    color: \"#0D3833\",\r\n    fontWeight: \"bold\",\r\n    margin: \"0\",\r\n  },\r\n\r\n  buttonStyle: {\r\n    width: \"30\",\r\n    backgroundColor: \"#0096FF\",\r\n    color: \"white\",\r\n    padding: \"8px 15px\",\r\n    bottom: \"0\",\r\n    margin: 10,\r\n  },\r\n};\r\n","import React, { useEffect, useState, useRef } from \"react\";\nimport LeafContract from \"./contracts/LeafDapp.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nimport Owner from \"./components/Owner\";\nimport Player from \"./components/Player\";\n\nfunction App() {\n  const [state, setState] = useState({\n    account: null,\n    web3: null,\n    contract: null,\n  });\n  const [isOwner, setIsOwner] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = LeafContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          LeafContract.abi,\n          deployedNetwork && deployedNetwork.address\n        );\n\n        setState({ account: accounts[0], web3: web3, contract: instance });\n\n        const owner = await instance.methods\n          .owner()\n          .call({ from: accounts[0] });\n        const isOwn = owner == accounts[0];\n        setIsOwner(isOwn);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`\n        );\n\n        console.error(error);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      window.ethereum.on(\"accountsChanged\", async function () {\n        window.location.reload(false);\n      });\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {isOwner ? (\n        <Owner parentToChild={state} />\n      ) : (\n        <Player parentToChild={state} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}